// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipPulled extends ethereum.Event {
  get params(): OwnershipPulled__Params {
    return new OwnershipPulled__Params(this);
  }
}

export class OwnershipPulled__Params {
  _event: OwnershipPulled;

  constructor(event: OwnershipPulled) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipPushed extends ethereum.Event {
  get params(): OwnershipPushed__Params {
    return new OwnershipPushed__Params(this);
  }
}

export class OwnershipPushed__Params {
  _event: OwnershipPushed;

  constructor(event: OwnershipPushed) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConvexAllocator__tokenInfoResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class ConvexAllocator extends ethereum.SmartContract {
  static bind(address: Address): ConvexAllocator {
    return new ConvexAllocator("ConvexAllocator", address);
  }

  exceedsLimit(token: Address, amount: BigInt): boolean {
    let result = super.call(
      "exceedsLimit",
      "exceedsLimit(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_exceedsLimit(
    token: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "exceedsLimit",
      "exceedsLimit(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pidForReserve(param0: Address): BigInt {
    let result = super.call(
      "pidForReserve",
      "pidForReserve(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pidForReserve(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pidForReserve",
      "pidForReserve(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  policy(): Address {
    let result = super.call("policy", "policy():(address)", []);

    return result[0].toAddress();
  }

  try_policy(): ethereum.CallResult<Address> {
    let result = super.tryCall("policy", "policy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardsPending(): BigInt {
    let result = super.call("rewardsPending", "rewardsPending():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardsPending(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsPending",
      "rewardsPending():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockInBlocks(): BigInt {
    let result = super.call(
      "timelockInBlocks",
      "timelockInBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timelockInBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockInBlocks",
      "timelockInBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenInfo(param0: Address): ConvexAllocator__tokenInfoResult {
    let result = super.call(
      "tokenInfo",
      "tokenInfo(address):(address,address,int128,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ConvexAllocator__tokenInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_tokenInfo(
    param0: Address
  ): ethereum.CallResult<ConvexAllocator__tokenInfoResult> {
    let result = super.tryCall(
      "tokenInfo",
      "tokenInfo(address):(address,address,int128,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ConvexAllocator__tokenInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  totalValueDeployed(): BigInt {
    let result = super.call(
      "totalValueDeployed",
      "totalValueDeployed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalValueDeployed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalValueDeployed",
      "totalValueDeployed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _booster(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardPool(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _curve3Pool(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _timelockInBlocks(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRewardTokenCall extends ethereum.Call {
  get inputs(): AddRewardTokenCall__Inputs {
    return new AddRewardTokenCall__Inputs(this);
  }

  get outputs(): AddRewardTokenCall__Outputs {
    return new AddRewardTokenCall__Outputs(this);
  }
}

export class AddRewardTokenCall__Inputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRewardTokenCall__Outputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get curveToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get max(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get pid(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class LowerLimitCall extends ethereum.Call {
  get inputs(): LowerLimitCall__Inputs {
    return new LowerLimitCall__Inputs(this);
  }

  get outputs(): LowerLimitCall__Outputs {
    return new LowerLimitCall__Outputs(this);
  }
}

export class LowerLimitCall__Inputs {
  _call: LowerLimitCall;

  constructor(call: LowerLimitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LowerLimitCall__Outputs {
  _call: LowerLimitCall;

  constructor(call: LowerLimitCall) {
    this._call = call;
  }
}

export class PullManagementCall extends ethereum.Call {
  get inputs(): PullManagementCall__Inputs {
    return new PullManagementCall__Inputs(this);
  }

  get outputs(): PullManagementCall__Outputs {
    return new PullManagementCall__Outputs(this);
  }
}

export class PullManagementCall__Inputs {
  _call: PullManagementCall;

  constructor(call: PullManagementCall) {
    this._call = call;
  }
}

export class PullManagementCall__Outputs {
  _call: PullManagementCall;

  constructor(call: PullManagementCall) {
    this._call = call;
  }
}

export class PushManagementCall extends ethereum.Call {
  get inputs(): PushManagementCall__Inputs {
    return new PushManagementCall__Inputs(this);
  }

  get outputs(): PushManagementCall__Outputs {
    return new PushManagementCall__Outputs(this);
  }
}

export class PushManagementCall__Inputs {
  _call: PushManagementCall;

  constructor(call: PushManagementCall) {
    this._call = call;
  }

  get newOwner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PushManagementCall__Outputs {
  _call: PushManagementCall;

  constructor(call: PushManagementCall) {
    this._call = call;
  }
}

export class QueueRaiseLimitCall extends ethereum.Call {
  get inputs(): QueueRaiseLimitCall__Inputs {
    return new QueueRaiseLimitCall__Inputs(this);
  }

  get outputs(): QueueRaiseLimitCall__Outputs {
    return new QueueRaiseLimitCall__Outputs(this);
  }
}

export class QueueRaiseLimitCall__Inputs {
  _call: QueueRaiseLimitCall;

  constructor(call: QueueRaiseLimitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class QueueRaiseLimitCall__Outputs {
  _call: QueueRaiseLimitCall;

  constructor(call: QueueRaiseLimitCall) {
    this._call = call;
  }
}

export class RaiseLimitCall extends ethereum.Call {
  get inputs(): RaiseLimitCall__Inputs {
    return new RaiseLimitCall__Inputs(this);
  }

  get outputs(): RaiseLimitCall__Outputs {
    return new RaiseLimitCall__Outputs(this);
  }
}

export class RaiseLimitCall__Inputs {
  _call: RaiseLimitCall;

  constructor(call: RaiseLimitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RaiseLimitCall__Outputs {
  _call: RaiseLimitCall;

  constructor(call: RaiseLimitCall) {
    this._call = call;
  }
}

export class RenounceManagementCall extends ethereum.Call {
  get inputs(): RenounceManagementCall__Inputs {
    return new RenounceManagementCall__Inputs(this);
  }

  get outputs(): RenounceManagementCall__Outputs {
    return new RenounceManagementCall__Outputs(this);
  }
}

export class RenounceManagementCall__Inputs {
  _call: RenounceManagementCall;

  constructor(call: RenounceManagementCall) {
    this._call = call;
  }
}

export class RenounceManagementCall__Outputs {
  _call: RenounceManagementCall;

  constructor(call: RenounceManagementCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
